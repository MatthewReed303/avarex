// from ARINC424-17.pdf
class CifpSidStarApproachLine {
  String recordType;
  String customerAreaCode;
  String sectionCode;
  String airportIdentifier;
  String icaoCode;
  String subsectionCode;
  String sidStarApproachIdentifier;
  String routeType;
  String transitionIdentifier;
  String sequenceNumber;
  String fixIdentifier;
  String continuationRecordNumber;
  String waypointDescriptionCode;
  String turnDirection;
  String rnp;
  String pathAndTermination;
  String turnDirectionValid;
  String recommendedNavaid;
  String arcRadius;
  String theta;
  String rho;
  String magneticCourse;
  String routeDistanceHoldingDistanceOrTime;
  String recdNavSection;
  String recdNavSubsection;
  String altitudeDescription;
  String atcIndicator;
  String altitude1;
  String altitude2;
  String transitionAltitude;
  String speedLimit;
  String verticalAngle;
  String centerFixOrTAAProcedureTurnIndicator;
  String multipleCodeOrTAASectorIdentifier;
  String gpsFmsIndication;
  String speedLimitDescription;
  String apchRouteQualifier1;
  String apchRouteQualifier2;
  String fileRecordNumber;
  String cycleDate;

  CifpSidStarApproachLine({
    required this.recordType,
    required this.customerAreaCode,
    required this.sectionCode,
    required this.airportIdentifier,
    required this.icaoCode,
    required this.subsectionCode,
    required this.sidStarApproachIdentifier,
    required this.routeType,
    required this.transitionIdentifier,
    required this.sequenceNumber,
    required this.fixIdentifier,
    required this.continuationRecordNumber,
    required this.waypointDescriptionCode,
    required this.turnDirection,
    required this.rnp,
    required this.pathAndTermination,
    required this.turnDirectionValid,
    required this.recommendedNavaid,
    required this.arcRadius,
    required this.theta,
    required this.rho,
    required this.magneticCourse,
    required this.routeDistanceHoldingDistanceOrTime,
    required this.recdNavSection,
    required this.recdNavSubsection,
    required this.altitudeDescription,
    required this.atcIndicator,
    required this.altitude1,
    required this.altitude2,
    required this.transitionAltitude,
    required this.speedLimit,
    required this.verticalAngle,
    required this.centerFixOrTAAProcedureTurnIndicator,
    required this.multipleCodeOrTAASectorIdentifier,
    required this.gpsFmsIndication,
    required this.speedLimitDescription,
    required this.apchRouteQualifier1,
    required this.apchRouteQualifier2,
    required this.fileRecordNumber,
    required this.cycleDate,
  });


  factory CifpSidStarApproachLine.fromMap(Map<String, dynamic> map) {
    return CifpSidStarApproachLine(
      recordType: map['recordType'],
      customerAreaCode: map['customerAreaCode'],
      sectionCode: map['sectionCode'],
      airportIdentifier: map['airportIdentifier'],
      icaoCode: map['icaoCode'],
      subsectionCode: map['subsectionCode'],
      sidStarApproachIdentifier: map['sidStarApproachIdentifier'],
      routeType: map['routeType'],
      transitionIdentifier: map['transitionIdentifier'],
      sequenceNumber: map['sequenceNumber'],
      fixIdentifier: map['fixIdentifier'],
      continuationRecordNumber: map['continuationRecordNumber'],
      waypointDescriptionCode: map['waypointDescriptionCode'],
      turnDirection: map['turnDirection'],
      rnp: map['rnp'],
      pathAndTermination: map['pathAndTermination'],
      turnDirectionValid: map['turnDirectionValid'],
      recommendedNavaid: map['recommendedNavaid'],
      arcRadius: map['arcRadius'],
      theta: map['theta'],
      rho: map['rho'],
      magneticCourse: map['magneticCourse'],
      routeDistanceHoldingDistanceOrTime: map['routeDistanceHoldingDistanceOrTime'],
      recdNavSection: map['recdNavSection'],
      recdNavSubsection: map['recdNavSubsection'],
      altitudeDescription: map['altitudeDescription'],
      atcIndicator: map['atcIndicator'],
      altitude1: map['altitude1'],
      altitude2: map['altitude2'],
      transitionAltitude: map['transitionAltitude'],
      speedLimit: map['speedLimit'],
      verticalAngle: map['verticalAngle'],
      centerFixOrTAAProcedureTurnIndicator: map['centerFixOrTAAProcedureTurnIndicator'],
      multipleCodeOrTAASectorIdentifier: map['multipleCodeOrTAASectorIdentifier'],
      gpsFmsIndication: map['gpsFmsIndication'],
      speedLimitDescription: map['speedLimitDescription'],
      apchRouteQualifier1: map['apchRouteQualifier1'],
      apchRouteQualifier2: map['apchRouteQualifier2'],
      fileRecordNumber: map['fileRecordNumber'],
      cycleDate: map['cycleDate'],
    );
  }
}